import React, { useEffect, useRef, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, DownloadCloud, CheckCircle2, Paperclip, AlertCircle } from 'lucide-react';

const Backdrop = ({ onClick }) => (
  <motion.div
    onClick={onClick}
    initial={{ opacity: 0 }}
    animate={{ opacity: 1 }}
    exit={{ opacity: 0 }}
    className="fixed inset-0 bg-black/40 backdrop-blur-sm"
  />
);

const ModalCard = ({ children }) => (
  <motion.div
    role="dialog"
    aria-modal="true"
    initial={{ y: 20, opacity: 0, scale: 0.98 }}
    animate={{ y: 0, opacity: 1, scale: 1 }}
    exit={{ y: 12, opacity: 0, scale: 0.98 }}
    transition={{ type: 'spring', stiffness: 300, damping: 24 }}
    className="relative w-[92vw] max-w-md rounded-2xl bg-white dark:bg-neutral-900 shadow-2xl ring-1 ring-black/5 mx-4"
  >
    {children}
  </motion.div>
);

const ProgressBar = ({ progress }) => (
  <div className="h-2 w-full rounded-full bg-gray-100 dark:bg-neutral-800 overflow-hidden">
    <motion.div
      className="h-full bg-gradient-to-r from-blue-500 via-indigo-500 to-purple-500"
      initial={{ width: 0 }}
      animate={{ width: `${progress}%` }}
      transition={{ ease: 'easeInOut', duration: 0.35 }}
    />
  </div>
);

const ReportModal = ({ isOpen, onClose, jobId }) => {
  const [includeAttachment, setIncludeAttachment] = useState(false);
  const [status, setStatus] = useState('idle'); // idle | preparing | downloading | done | error
  const [progress, setProgress] = useState(0);
  const closeBtnRef = useRef(null);

  useEffect(() => {
    if (isOpen) {
      setIncludeAttachment(false);
      setStatus('idle');
      setProgress(0);
      setTimeout(() => {
        closeBtnRef.current?.focus();
      }, 100);
    }
  }, [isOpen]);

  const startDownload = async () => {
    try {
      setStatus('preparing');
      for (let i = 0; i <= 40; i += 10) {
        await new Promise(r => setTimeout(r, 90));
        setProgress(i);
      }
      setStatus('downloading');
      for (let i = 50; i <= 100; i += 10) {
        await new Promise(r => setTimeout(r, 120));
        setProgress(i);
      }
      // Simulate a PDF file blob
      const content = `Report for Job #${jobId || 'N/A'}\nAttachment: ${includeAttachment ? 'Yes' : 'No'}\n\nGenerated by Elegant Reports.`;
      const blob = new Blob([content], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `job-${jobId || 'report'}.pdf`;
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);
      setStatus('done');
      setTimeout(() => {
        onClose();
      }, 1000);
    } catch (e) {
      setStatus('error');
    }
  };

  const headerIcon = () => {
    if (status === 'done') return <CheckCircle2 className="text-emerald-500" size={28} />;
    if (status === 'error') return <AlertCircle className="text-red-500" size={28} />;
    return <DownloadCloud className="text-blue-600" size={28} />;
  };

  return (
    <AnimatePresence>
      {isOpen && (
        <div className="fixed inset-0 z-50 grid place-items-center">
          <Backdrop onClick={onClose} />
          <ModalCard>
            <div className="p-5">
              <div className="flex items-start justify-between gap-4">
                <div className="flex items-center gap-3">
                  <div className="h-11 w-11 rounded-xl bg-blue-50 dark:bg-blue-500/10 grid place-items-center">
                    {headerIcon()}
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                      {status === 'done' ? 'Download started' : status === 'error' ? 'Something went wrong' : 'Download report'}
                    </h3>
                    <p className="text-sm text-gray-500 dark:text-gray-400">
                      {status === 'done'
                        ? 'Your report is on its way.'
                        : status === 'error'
                        ? 'Please try again.'
                        : `Job #${jobId || 'â€”'}`}
                    </p>
                  </div>
                </div>
                <button
                  ref={closeBtnRef}
                  onClick={onClose}
                  className="rounded-full p-2 text-gray-500 hover:text-gray-700 hover:bg-gray-100 dark:hover:bg-neutral-800 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  aria-label="Close"
                >
                  <X size={18} />
                </button>
              </div>

              <div className="mt-6 space-y-4">
                {status !== 'done' && status !== 'error' && (
                  <div className="space-y-2">
                    <ProgressBar progress={progress} />
                    <div className="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
                      <span>{status === 'idle' ? 'Ready' : status === 'preparing' ? 'Preparing' : 'Downloading'}</span>
                      <span>{progress}%</span>
                    </div>
                  </div>
                )}

                {status === 'idle' && (
                  <label className="flex items-center gap-3 text-sm text-gray-700 dark:text-gray-300">
                    <span className={`h-5 w-5 grid place-items-center rounded border ${includeAttachment ? 'bg-blue-600 border-blue-600 text-white' : 'border-gray-300'}`}>
                      {includeAttachment && <Paperclip size={14} />}
                    </span>
                    <input
                      type="checkbox"
                      checked={includeAttachment}
                      onChange={(e) => setIncludeAttachment(e.target.checked)}
                      className="hidden"
                    />
                    Include attachment
                  </label>
                )}
              </div>

              <div className="mt-6 flex justify-end gap-3">
                <button
                  onClick={onClose}
                  disabled={status === 'downloading' || status === 'preparing'}
                  className="px-4 py-2 rounded-lg text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-neutral-800 disabled:opacity-50"
                >
                  Cancel
                </button>
                {status === 'idle' && (
                  <motion.button
                    whileTap={{ scale: 0.98 }}
                    onClick={startDownload}
                    className="inline-flex items-center gap-2 px-4 py-2 rounded-lg text-white bg-gradient-to-r from-blue-600 to-indigo-600 shadow-lg shadow-blue-600/20 hover:shadow-blue-600/30"
                  >
                    <DownloadCloud size={18} /> Start download
                  </motion.button>
                )}
                {status === 'error' && (
                  <motion.button
                    whileTap={{ scale: 0.98 }}
                    onClick={() => {
                      setStatus('idle');
                      setProgress(0);
                    }}
                    className="inline-flex items-center gap-2 px-4 py-2 rounded-lg text-white bg-red-600/90 hover:bg-red-600"
                  >
                    Try again
                  </motion.button>
                )}
              </div>
            </div>
          </ModalCard>
        </div>
      )}
    </AnimatePresence>
  );
};

export default ReportModal;
